configurations {
  testCompile { extendsFrom compile }
  toolsCompile { extendsFrom compile }
}

sourceSets {
  main
  // gradle bug - cannont include two different classifiers of the same dependency
  //test
  //tools {
  //compileClasspath = sourceSets.main.classes + sourceSets.test.classes + configurations.toolsCompile + configurations.testCompile
  //}
}

dependencies {
  compile project(":substance")
  compile project(":flamingo")
  testCompile files('lib/substance-6.2-tst-hack.jar')
  testCompile files('lib/flamingo-6.2-tst-hack.jar')
  testCompile files('lib/batik-all.jar')
//  testCompile group:'com.github.insubstantial', name:'substance', version: version, ext: 'tst'
//  testCompile group:'com.github.insubstantial', name:'flamingo', version: version, ext: 'tst'
  testCompile group: 'com.jgoodies', name: 'forms', version: '1.2.0'
  toolsCompile project(":substance")
  toolsCompile group: 'org.easytesting', name: 'fest-swing', version: '1.2'
}

task augmentation(dependsOn: classes) {
  description = "Performs code augmentaiton for the laf-plugin and laf-widget libraries on the substance jar classes"

  doLast {
    // Explode laf-plugin and laf-widget
//        copy {
//            from zipTree('lib/build/laf-plugin.jar')
//            into sourceSets.main.classesDir
//        }
//        copy {
//            from zipTree('lib/build/laf-widget.jar')
//            into sourceSets.main.classesDir
//        }


    augmentClassPath = configurations.toolsCompile.asPath + File.pathSeparator + configurations.compile.asPath

    ant.taskdef(name: 'delegate-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentTask", classpath: augmentClassPath)
    ant.taskdef(name: 'delegate-update-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentUpdateTask", classpath: augmentClassPath)
    ant.taskdef(name: 'laf-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentMainTask", classpath: augmentClassPath)
    ant.taskdef(name: 'icon-ghosting-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentIconGhostingTask", classpath: augmentClassPath)
    ant.taskdef(name: 'container-ghosting-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentContainerGhostingTask", classpath: augmentClassPath)

    verboseAugmentation = false

    //LAF augmentation
    //ant.'laf-augment'(verbose: verboseAugmentaiton, mainlafclassname:"org.pushingpixels.substance.api.SubstanceLookAndFeel") {
    //    classpathset(dir:sourceSets.main.classesDir)
    //    delegate(name:"ViewportUI")
    //}

    // Delegate augmentation
    ant.'delegate-update-augment'(verbose: verboseAugmentation, pattern: ".*UI\u002Eclass") {
      classpathset(dir: sourceSets.main.classesDir)
    }

    ant.'delegate-augment'(verbose: verboseAugmentation, pattern: ".*UI\u002Eclass") {
      classpathset(dir: sourceSets.main.classesDir)
    }

    // Container ghosting augmentation
    ant.'container-ghosting-augment'(verbose: verboseAugmentation) {
      classpathset(dir: sourceSets.main.classesDir)
      containerghosting(className: "org.pushingpixels.substance.flamingo.ribbon.ui.SubstanceRibbonGalleryUI", toInjectAfterOriginal: "true")
      containerghosting(className: "org.pushingpixels.substance.flamingo.ribbon.ui.SubstanceRibbonButtonUI", toInjectAfterOriginal: "true")
    }
  }
}

jar {
  dependsOn augmentation
  //dependsOn toolsClasses

  manifest {
    attributes(
        "Substance-Version": version,
        "Flamingo-Version": version,
        "Substance-VersionName": versionKey,
        "Flamingo-VersionName": versionKey,
        "Substance-BuildStamp": timeStamp
    )
  }

}

task liteJar(type: Jar) {
  dependsOn augmentation
  //dependsOn toolsClasses

  classifier = 'lite'

  manifest {
    attributes(
        "Substance-Version": version,
        "Flamingo-Version": version,
        "Substance-VersionName": versionKey,
        "Flamingo-VersionName": versionKey,
        "Substance-BuildStamp": timeStamp
    )
  }
}

task testJar(type: Jar) {
  classifier = 'tst'

  from sourceSets.test.classes

  manifest {
    attributes(
        "Substance-Version": version,
        "Flamingo-Version": version,
        "Substance-VersionName": versionKey,
        "Flamingo-VersionName": versionKey,
        "Substance-BuildStamp": timeStamp
    )
  }
}

//task testLiteJar(type: Jar) {
//  classifier = 'tst-lite'
//
//  from sourceSets.test.classes
//
//  manifest {
//    attributes(
//      "Substance-Version": versionKey,
//      "Substance-BuildStamp": timeStamp,
//      "Main-Class": "test.Check",
//      "Class-Path": "substance-lite.jar ../lib/trident.jar ../lib/build/forms-1.2.0.jar ../lib/build/swingx.jar ../lib/build/substance-swingx.jar"
//    )
//  }
//}
//
//task toolsJar(type: Jar) {
//  classifier = 'tools'
//  from sourceSets.tools.classes
//  manifest {
//    attributes(
//      "Substance-Version": versionKey,
//      "Substance-BuildStamp": timeStamp
//    )
//  }
////    the annotation factory class doesn't exist, ignore it?
////    doLast {
////        ant.apt(srcdir:sourceSets.tools.java.srcDirs.iterator().next(), classpath:"$libsDir/$archiveName", factory:"tools.apt.", compile:false)
////    }
//}

task distroJar(type: Jar) {
  //dependsOn toolsJar, liteJar, testJar, testLiteJar, jar
  dependsOn liteJar, jar
  classifier = 'all'
  from(projectDir)
  include "lib/**"
  include "src/**"
  include "www/**/*.html"
  include "www/docs/**"
  include "www/images/**"
  include "gradle.properties"
  include "build.gradle"
}

//allSubstanceJars = [toolsJar, liteJar, testJar, testLiteJar, distroJar]

//uploadArchives.dependsOn << allSubstanceJars
//assemble.dependsOn << allSubstanceJars

artifacts {
  archives liteJar
}

uploadArchives {
  try {
    def x = [deployUsername, deployPassword]
  } catch (Exception e) {
    deployUsername = 'unset'
    deployPassword = ''
  }
  repositories {
    mavenDeployer {
      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication userName: deployUsername, password: deployPassword
      }
      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication userName: deployUsername, password: deployPassword
      }
      configurePOM(pom)
    }
  }
}

install {
  configurePOM(repositories.mavenInstaller.pom)
}

private def configurePOM(def pom) {
  pom.project {
    modelVersion '4.0.0'
    packaging 'jar'
    name "substance-flamingo"
    description "A fork of @kirilcool's substance project"
    url "http://insubstantial.github.com/insubstantialPeacock"
    licenses {
      license {
        name 'BSD License'
        url 'http://www.opensource.org/licenses/bsd-license.php'
        distribution 'repo'
        comments "Does not cover the Xoetrope Color Wheel"
      }
      license {
        name 'Mozilla Public License 1.1'
        url 'http://www.opensource.org/licenses/mozilla1.1'
        distribution 'repo'
        comments "Covers the Xoetrope Color Wheel"
      }
    }
    scm {
      connection 'scm:git:git@github.com:Insubstantial/insubstantial.git'
      developerConnection 'scm:git:git@github.com:Insubstantial/insubstantial.git'
      url 'scm:git:git@github.com:Insubstantial/insubstantial.git'
    }
    developers {
      developer {
        name 'Kirill Grouchnikov'
        email 'kirillcool@yahoo.com'
        roles {
          role 'author'
          role 'developer'
        }
      }
      developer {
        name 'Danno Ferrin'
        email 'danno.ferrin@shemnon.com'
        roles {
          role 'maintainer'
        }
      }
    }
  }
}

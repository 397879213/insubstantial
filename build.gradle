apply plugin: 'java'

version = "6.1-insubstantial"
versionKey = "6.1-insubstantial-invincible"
release = "internal"
timeStamp = new Date().format("MMMM d, yyyy HH:mm:ss z")

sourceCompatibility = 1.6
targetCompatibility = 1.6

distsDirName = "../drop"
libsDirName = distsDir

configurations {
    testCompile { extendsFrom compile }
    toolsCompile { extendsFrom compile }
}

sourceSets {
    main
    test
    tools {
        compileClasspath = sourceSets.main.classes + sourceSets.test.classes + configurations.toolsCompile + configurations.testCompile
    }
}

dependencies {
    compile files('lib/trident.jar', 'lib/build/laf-plugin.jar', 'lib/build/laf-widget.jar')
    testCompile files('lib/build/forms-1.2.0.jar', 'lib/build/swingx.jar')
    toolsCompile files('lib/test/fest-swing-1.2.jar', 'lib/build/asm-all-2.2.2.jar')
}

task augmentation(dependsOn: classes) {
    description = "Performs code augmentaiton for the laf-plugin and laf-widget libraries on the substance jar classes"

    doLast {
        // Explode laf-plugin and laf-widget
//        copy {
//            from zipTree('lib/build/laf-plugin.jar')
//            into sourceSets.main.classesDir
//        }
//        copy {
//            from zipTree('lib/build/laf-widget.jar')
//            into sourceSets.main.classesDir
//        }

        augmentClassPath = configurations.toolsCompile.asPath

        ant.taskdef(name: 'delegate-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentTask", classpath: augmentClassPath)
        ant.taskdef(name: 'delegate-update-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentUpdateTask", classpath: augmentClassPath)
        ant.taskdef(name: 'laf-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentMainTask", classpath: augmentClassPath)
        ant.taskdef(name: 'icon-ghosting-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentIconGhostingTask", classpath: augmentClassPath)
        ant.taskdef(name: 'container-ghosting-augment', classname: "org.pushingpixels.lafwidget.ant.AugmentContainerGhostingTask", classpath: augmentClassPath)

        verboseAugmentation = false

        //LAF augmentation 
        //ant.'laf-augment'(verbose: verboseAugmentaiton, mainlafclassname:"org.pushingpixels.substance.api.SubstanceLookAndFeel") {
        //    classpathset(dir:sourceSets.main.classesDir)
        //    delegate(name:"ViewportUI")
        //}

        // Delegate augmentation
        ant.'delegate-update-augment'(verbose: verboseAugmentation, pattern: ".*UI\u002Eclass") {
            classpathset(dir: sourceSets.main.classesDir)
        }

        ant.'delegate-augment'(verbose: verboseAugmentation, pattern: ".*UI\u002Eclass") {
            classpathset(dir: sourceSets.main.classesDir)
        }

        // Icon ghosting augmentation
        ant.'icon-ghosting-augment'(verbose: verboseAugmentation) {
            classpathset(dir: sourceSets.main.classesDir)
            iconghosting(className: "org.pushingpixels.substance.internal.ui.SubstanceButtonUI", methodName: "paintIcon")
            iconghosting(className: "org.pushingpixels.substance.internal.ui.SubstanceToggleButtonUI", methodName: "paintIcon")
        }

        // Container ghosting augmentation
        ant.'container-ghosting-augment'(verbose: verboseAugmentation) {
            classpathset(dir: sourceSets.main.classesDir)
            containerghosting(className: "org.pushingpixels.substance.internal.ui.SubstanceDesktopPaneUI", toInjectAfterOriginal: "true")
            containerghosting(className: "org.pushingpixels.substance.internal.ui.SubstanceMenuBarUI", toInjectAfterOriginal: "true")
            containerghosting(className: "org.pushingpixels.substance.internal.ui.SubstanceMenuUI", toInjectAfterOriginal: "true")
            containerghosting(className: "org.pushingpixels.substance.internal.ui.SubstancePanelUI", toInjectAfterOriginal: "true")
            containerghosting(className: "org.pushingpixels.substance.internal.ui.SubstanceScrollBarUI", toInjectAfterOriginal: "true")
            containerghosting(className: "org.pushingpixels.substance.internal.ui.SubstanceToolBarUI", toInjectAfterOriginal: "true")
        }
    }
}

jar {
    dependsOn augmentation
    dependsOn toolsClasses

    exclude 'org/pushingpixels/lafwidget/ant/**'

    from zipTree('lib/build/laf-plugin.jar')
    from zipTree('lib/build/laf-widget.jar')

    manifest {
        attributes(
            "Substance-Distribution": "Full",
            "Substance-Version": versionKey,
            "Substance-BuildStamp": timeStamp
        )
    }

}

task liteJar(type: Jar) {
    dependsOn augmentation
    dependsOn toolsClasses

    appendix = 'lite'

    from sourceSets.main.classes
    exclude 'org/pushingpixels/substance/internal/contrib/randelshofer/**'
    exclude 'org/pushingpixels/substance/internal/contrib/xoetrope/**'
    exclude 'org/pushingpixels/substance/internal/ui/SubstanceColorChooserUI*'
    exclude 'org/pushingpixels/lafwidget/ant/**'

    from zipTree('lib/build/laf-plugin.jar')
    from zipTree('lib/build/laf-widget.jar')

    manifest {
        attributes(
            "Substance-Distribution": "Lite",
            "Substance-Version": versionKey,
            "Substance-BuildStamp": timeStamp
        )
    }
}

task testJar(type: Jar) {
    appendix = 'tst'

    from sourceSets.test.classes

    manifest {
        attributes(
            "Substance-Version": versionKey,
            "Substance-BuildStamp": timeStamp,
            "Main-Class": "test.Check",
            "Class-Path": "substance.jar ../lib/trident.jar ../lib/build/forms-1.2.0.jar ../lib/build/swingx.jar ../lib/build/substance-swingx.jar"
        )
    }
}

task testLiteJar(type: Jar) {
    appendix = 'tst-lite'
    
    from sourceSets.test.classes

    manifest {
        attributes(
            "Substance-Version": versionKey,
            "Substance-BuildStamp": timeStamp,
            "Main-Class": "test.Check",
            "Class-Path": "substance-lite.jar ../lib/trident.jar ../lib/build/forms-1.2.0.jar ../lib/build/swingx.jar ../lib/build/substance-swingx.jar"
        )
    }
}


task toolsJar(type: Jar) {
    appendix = 'tools'
    from sourceSets.tools.classes
    manifest {
        attributes(
            "Substance-Version": versionKey,
            "Substance-BuildStamp": timeStamp
        )
    }
//    the annotation factory class doesnt exist, ignore it?
//    doLast {
//        ant.apt(srcdir:sourceSets.tools.java.srcDirs.iterator().next(), classpath:"$libsDir/$archiveName", factory:"tools.apt.", compile:false)
//    }
}

task distroJar(type: Jar) {
    appendix = 'all'
    from(projectDir)
    include "lib/**" 
    include "src/**"
    include "gradle.properties"
    include "build.gradle"
    exclude "**/*.vsd"
}

allSubstanceJars = [toolsJar, liteJar, testJar, testLiteJar, distroJar]

uploadArchives.dependsOn << allSubstanceJars
assemble.dependsOn << allSubstanceJars

    